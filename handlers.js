import { TEXT } from './config.js';
import {
  getMainKeyboard,
  getDateSelectionWithBackKeyboard,
  getStatsKeyboard,
  getBackKeyboard,
  parseUserDate,
} from './keyboards.js';
import { getCoffeeSales } from './poster_api.js';
import { DOUBLE_GRINDER } from './config.js';

// –•—Ä–∞–Ω–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const userStates = new Map();

export function setupMainHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    const userState = userStates.get(chatId) || {};
    if (userState.lastMessageId) {
      try {
        await bot.deleteMessage(chatId, userState.lastMessageId);
      } catch (error) {}
    }

    const sentMessage = await bot.sendMessage(chatId, TEXT.WELCOME, getMainKeyboard());

    userStates.set(chatId, {
      lastMessageId: sentMessage.message_id,
      waitingForDate: false,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    const userState = userStates.get(chatId) || {};

    try {
      if (data === 'grinder_check') {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã
        await bot.editMessageText(TEXT.GRINDER_PAGE, {
          chat_id: chatId,
          message_id: messageId,
          ...getDateSelectionWithBackKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = false;
        userStates.set(chatId, userState);
      } else if (data.startsWith('date_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
        const date = data.replace('date_', '');
        await showCoffeeSales(bot, chatId, messageId, date, userState);
      } else if (data.startsWith('refresh_')) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±–Ω–æ–≤–∏—Ç—å"
        const date = data.replace('refresh_', '');
        await showCoffeeSales(bot, chatId, messageId, date, userState);
      } else if (data === 'input_date') {
        // –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤–≤–æ–¥ –¥–∞—Ç—ã
        await bot.editMessageText(TEXT.INPUT_DATE, {
          chat_id: chatId,
          message_id: messageId,
          ...getBackKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = true;
        userStates.set(chatId, userState);
      } else if (data === 'back_to_main') {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é
        await bot.editMessageText(TEXT.WELCOME, {
          chat_id: chatId,
          message_id: messageId,
          ...getMainKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = false;
        userStates.set(chatId, userState);
      }

      // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userState = userStates.get(chatId) || {};

    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É /start (–µ—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    if (text === '/start') {
      return;
    }

    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É
    if (userState.waitingForDate && text && text !== TEXT.WELCOME) {
      const parsedDate = parseUserDate(text);

      if (parsedDate) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω–æ–π –¥–∞—Ç—ã
        try {
          await bot.deleteMessage(chatId, userState.lastMessageId);
        } catch (error) {}

        const sentMessage = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...');
        await showCoffeeSales(bot, chatId, sentMessage.message_id, parsedDate, userState);
      } else {
        // –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
        await bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07.09.2024)',
        );
      }
      return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    if (text === TEXT.WELCOME) {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (userState.lastMessageId) {
        try {
          await bot.deleteMessage(chatId, userState.lastMessageId);
        } catch (error) {}
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      const sentMessage = await bot.sendMessage(chatId, TEXT.WELCOME, getMainKeyboard());

      userState.lastMessageId = sentMessage.message_id;
      userState.waitingForDate = false;
      userStates.set(chatId, userState);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂
async function showCoffeeSales(bot, chatId, messageId, date, userState) {
  try {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await bot.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...', {
      chat_id: chatId,
      message_id: messageId,
    });

    const { sales, date: salesDate } = await getCoffeeSales(date);

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const displayDate = salesDate
      ? `${salesDate.slice(6, 8)}.${salesDate.slice(4, 6)}.${salesDate.slice(0, 4)}`
      : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É';

    let message = `üìä –ü—Ä–æ–¥–∞–∂–∏ –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –∑–∞ ${displayDate}:\n\n`;

    if (sales.length > 0) {
      let totalCount = 0;
      let totalRevenue = 0;
      let grinderCount = 0;

      sales.forEach((item) => {
        const itemCount = parseInt(item.count) || 0;
        totalCount += itemCount;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–≤–∞–∏–≤–∞—Ç—å –¥–ª—è –≥—Ä–∏–Ω–¥–µ—Ä–∞
        const isDoublePortion = DOUBLE_GRINDER.some((doubleProduct) =>
          item.product_name?.toLowerCase().includes(doubleProduct.toLowerCase()),
        );
        grinderCount += isDoublePortion ? itemCount * 2 : itemCount;
        message += `${isDoublePortion ? 'üü†' : '‚ö™'} ${item.product_name}: ${parseInt(
          item.count,
        )} —à—Ç.\n`;
      });

      message += `\nüìà –ò—Ç–æ–≥–æ: ${totalCount.toFixed(0)} —à—Ç.`;
      message += `\nüìà –ò—Ç–æ–≥–æ –ø–æ –≥—Ä–∏–Ω–¥–µ—Ä—É: ${grinderCount} —à—Ç.`;
    } else {
      message += 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É';
    }

    message += '\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + new Date().toLocaleTimeString();
    message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:';

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...getStatsKeyboard(date), // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–∏—Ç—å
    });

    userState.lastMessageId = messageId;
    userState.waitingForDate = false;
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', {
      chat_id: chatId,
      message_id: messageId,
      ...getBackKeyboard(),
    });
  }
}
