import { TEXT } from './config.js';
import {
  getMainKeyboard,
  getDateSelectionWithBackKeyboard,
  getStatsKeyboard,
  getBackKeyboard,
  parseUserDate,
} from './keyboards.js';
import { getCoffeeSales, getSalesAnalyticsStat, getSalesAnalyticsRange } from './poster_api.js';
import { DOUBLE_GRINDER } from './config.js';

// –•—Ä–∞–Ω–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
const userStates = new Map();

export function setupMainHandlers(bot) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;

    const userState = userStates.get(chatId) || {};
    if (userState.lastMessageId) {
      try {
        await bot.deleteMessage(chatId, userState.lastMessageId);
      } catch (error) {}
    }

    const sentMessage = await bot.sendMessage(chatId, TEXT.WELCOME, getMainKeyboard());

    userStates.set(chatId, {
      lastMessageId: sentMessage.message_id,
      waitingForDate: false,
    });
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫
  bot.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const messageId = callbackQuery.message.message_id;
    const data = callbackQuery.data;

    const userState = userStates.get(chatId) || {};

    try {
      if (data === 'grinder_check') {
        await bot.editMessageText(TEXT.GRINDER_PAGE, {
          chat_id: chatId,
          message_id: messageId,
          ...getDateSelectionWithBackKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = false;
        userState.currentMode = 'grinder';
        userStates.set(chatId, userState);
      } else if (data.startsWith('date_')) {
        const date = data.replace('date_', '');

        if (userState.currentMode === 'sales') {
          await showSalesAnalytics(bot, chatId, messageId, date, userState);
        } else {
          await showCoffeeSales(bot, chatId, messageId, date, userState);
        }
      } else if (data.startsWith('refresh_')) {
        const date = data.replace('refresh_', '');

        if (userState.currentMode === 'sales') {
          await showSalesAnalytics(bot, chatId, messageId, date, userState);
        } else {
          await showCoffeeSales(bot, chatId, messageId, date, userState);
        }
      } else if (data === 'input_date') {
        await bot.editMessageText(TEXT.INPUT_DATE, {
          chat_id: chatId,
          message_id: messageId,
          ...getBackKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = true;
        userStates.set(chatId, userState);
      } else if (data === 'back_to_main') {
        await bot.editMessageText(TEXT.WELCOME, {
          chat_id: chatId,
          message_id: messageId,
          ...getMainKeyboard(),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = false;
        userState.currentMode = null;
        userStates.set(chatId, userState);
      } else if (data === 'sales_stats') {
        await bot.editMessageText(TEXT.SALES_PAGE, {
          chat_id: chatId,
          message_id: messageId,
          ...getDateSelectionWithBackKeyboard('sales'),
        });

        userState.lastMessageId = messageId;
        userState.waitingForDate = false;
        userState.currentMode = 'sales';
        userStates.set(chatId, userState);
      }

      await bot.answerCallbackQuery(callbackQuery.id);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback:', error);
      await bot.answerCallbackQuery(callbackQuery.id, { text: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞' });
    }
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    const userState = userStates.get(chatId) || {};

    if (text === '/start') {
      return;
    }

    if (userState.waitingForDate && text && text !== TEXT.WELCOME) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –¥–∏–∞–ø–∞–∑–æ–Ω –ª–∏ —ç—Ç–æ
      if (text.includes('-') && userState.currentMode === 'sales') {
        const parts = text.split('-').map((p) => p.trim());
        if (parts.length === 2) {
          const startDate = parseUserDate(parts[0]);
          const endDate = parseUserDate(parts[1]);

          if (startDate && endDate) {
            try {
              if (userState.lastMessageId) {
                await bot.deleteMessage(chatId, userState.lastMessageId);
              }
            } catch (error) {}

            const sentMessage = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥...');

            await showSalesAnalyticsRange(
              bot,
              chatId,
              sentMessage.message_id,
              startDate,
              endDate,
              userState,
            );
            return;
          }
        }

        await bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Ç–∞–∫: –î–î.–ú–ú.–ì–ì–ì–ì - –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 20.09.2025 - 24.09.2025)',
        );
        return;
      }

      // –û–±—ã—á–Ω–∞—è –æ–¥–∏–Ω–æ—á–Ω–∞—è –¥–∞—Ç–∞
      const parsedDate = parseUserDate(text);

      if (parsedDate) {
        try {
          if (userState.lastMessageId) {
            await bot.deleteMessage(chatId, userState.lastMessageId);
          }
        } catch (error) {}

        const sentMessage = await bot.sendMessage(chatId, '‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ...');

        if (userState.currentMode === 'sales') {
          await showSalesAnalytics(bot, chatId, sentMessage.message_id, parsedDate, userState);
        } else {
          await showCoffeeSales(bot, chatId, sentMessage.message_id, parsedDate, userState);
        }
      } else {
        await bot.sendMessage(
          chatId,
          '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä: 07.09.2024)',
        );
      }
      return;
    }

    if (text === TEXT.WELCOME) {
      if (userState.lastMessageId) {
        try {
          await bot.deleteMessage(chatId, userState.lastMessageId);
        } catch (error) {}
      }

      const sentMessage = await bot.sendMessage(chatId, TEXT.WELCOME, getMainKeyboard());

      userState.lastMessageId = sentMessage.message_id;
      userState.waitingForDate = false;
      userState.currentMode = null;
      userStates.set(chatId, userState);
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–¥–∞–∂ (–∫–æ—Ñ–µ)
async function showCoffeeSales(bot, chatId, messageId, date, userState) {
  try {
    await bot.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...', {
      chat_id: chatId,
      message_id: messageId,
    });

    const { sales, date: salesDate } = await getCoffeeSales(date);

    const displayDate = salesDate
      ? `${salesDate.slice(6, 8)}.${salesDate.slice(4, 6)}.${salesDate.slice(0, 4)}`
      : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É';

    let message = `üìä –ü—Ä–æ–¥–∞–∂–∏ –∫–æ—Ñ–µ–π–Ω—ã—Ö –Ω–∞–ø–∏—Ç–∫–æ–≤ –∑–∞ ${displayDate}:\n\n`;

    if (sales.length > 0) {
      let totalCount = 0;
      let grinderCount = 0;

      sales.forEach((item) => {
        const itemCount = parseInt(item.count) || 0;
        totalCount += itemCount;

        const isDoublePortion = DOUBLE_GRINDER.some((doubleProduct) =>
          item.product_name?.toLowerCase().includes(doubleProduct.toLowerCase()),
        );
        grinderCount += isDoublePortion ? itemCount * 2 : itemCount;
        message += `${isDoublePortion ? 'üü†' : '‚ö™'} ${item.product_name}: ${itemCount} —à—Ç.\n`;
      });

      message += `\nüìà –ò—Ç–æ–≥–æ: ${totalCount} —à—Ç.`;
      message += `\nüìà –ò—Ç–æ–≥–æ –ø–æ –≥—Ä–∏–Ω–¥–µ—Ä—É: ${grinderCount} —à—Ç.`;
    } else {
      message += 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É';
    }

    message += '\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + new Date().toLocaleTimeString();
    message += '\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –¥–∞—Ç—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:';

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...getStatsKeyboard(date),
    });

    userState.lastMessageId = messageId;
    userState.waitingForDate = false;
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö', {
      chat_id: chatId,
      message_id: messageId,
      ...getBackKeyboard(),
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
async function showSalesAnalytics(bot, chatId, messageId, date, userState) {
  try {
    await bot.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...', {
      chat_id: chatId,
      message_id: messageId,
    });

    const { analytics, date: analyticsDate } = await getSalesAnalyticsStat(date);

    const displayDate = analyticsDate
      ? `${analyticsDate.slice(6, 8)}.${analyticsDate.slice(4, 6)}.${analyticsDate.slice(0, 4)}`
      : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –¥–∞—Ç—É';

    let message = `üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ ${displayDate}:\n\n`;

    if (analytics && analytics.counters) {
      const counters = analytics.counters;

      message += `üí∞ –í—ã—Ä—É—á–∫–∞: ${parseFloat(counters.revenue).toFixed(2)} –≥—Ä–Ω\n`;
      message += `üßæ –ß–µ–∫–æ–≤: ${counters.transactions} —à—Ç\n`;
      message += `üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${counters.visitors} —á–µ–ª\n`;
      message += `üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${counters.average_receipt} –≥—Ä–Ω\n`;
      message += `üíµ –ü—Ä–∏–±—ã–ª—å: ${parseFloat(counters.profit).toFixed(2)} –≥—Ä–Ω\n`;
    } else {
      message += 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —ç—Ç—É –¥–∞—Ç—É';
    }

    message += '\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + new Date().toLocaleTimeString();

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...getStatsKeyboard(date, 'sales'),
    });

    userState.lastMessageId = messageId;
    userState.waitingForDate = false;
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      chat_id: chatId,
      message_id: messageId,
      ...getBackKeyboard(),
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥
async function showSalesAnalyticsRange(bot, chatId, messageId, startDate, endDate, userState) {
  try {
    await bot.editMessageText('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥...', {
      chat_id: chatId,
      message_id: messageId,
    });

    const { analytics, start, end } = await getSalesAnalyticsRange(startDate, endDate);

    const displayStart = `${start.slice(6, 8)}.${start.slice(4, 6)}.${start.slice(0, 4)}`;
    const displayEnd = `${end.slice(6, 8)}.${end.slice(4, 6)}.${end.slice(0, 4)}`;

    let message = `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥ ${displayStart} - ${displayEnd}:\n\n`;

    if (analytics && analytics.counters) {
      const counters = analytics.counters;
      message += `üí∞ –í—ã—Ä—É—á–∫–∞: ${parseFloat(counters.revenue).toFixed(2)} –≥—Ä–Ω\n`;
      message += `üßæ –ß–µ–∫–æ–≤: ${counters.transactions} —à—Ç\n`;
      message += `üë• –ü–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π: ${counters.visitors} —á–µ–ª\n`;
      message += `üìä –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${counters.average_receipt} –≥—Ä–Ω\n`;
      message += `‚è±Ô∏è –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: ${parseFloat(counters.average_time).toFixed(1)} —á\n`;
      message += `üíµ –ü—Ä–∏–±—ã–ª—å: ${parseFloat(counters.profit).toFixed(2)} –≥—Ä–Ω\n`;
    } else {
      message += 'üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥';
    }

    message += '\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + new Date().toLocaleTimeString();

    await bot.editMessageText(message, {
      chat_id: chatId,
      message_id: messageId,
      ...getBackKeyboard(),
    });

    userState.lastMessageId = messageId;
    userState.waitingForDate = false;
    userStates.set(chatId, userState);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥:', error);
    await bot.editMessageText('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–µ—Ä–∏–æ–¥', {
      chat_id: chatId,
      message_id: messageId,
      ...getBackKeyboard(),
    });
  }
}
