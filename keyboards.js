import TelegramBot from 'node-telegram-bot-api';

export function getMainKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '‚òï –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∏–Ω–¥–µ—Ä–∞', callback_data: 'grinder_check' },
          { text: 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'sales_stats' },
        ],
      ],
    },
  };
}
export function getDateSelectionKeyboard() {
  const today = new Date();
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üü¢ –°–µ–≥–æ–¥–Ω—è', callback_data: `date_${formatDate(today)}` },
          { text: 'üü° –í—á–µ—Ä–∞', callback_data: `date_${formatDate(yesterday)}` },
        ],
        [{ text: 'üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', callback_data: 'input_date' }],
      ],
    },
  };
}

export function getDateSelectionWithBackKeyboard() {
  const today = new Date();
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üü¢ –°–µ–≥–æ–¥–Ω—è', callback_data: `date_${formatDate(today)}` },
          { text: 'üü° –í—á–µ—Ä–∞', callback_data: `date_${formatDate(yesterday)}` },
        ],
        [{ text: 'üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', callback_data: 'input_date' }],
        [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }],
      ],
    },
  };
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–∏—Ç—å
export function getStatsKeyboard(date) {
  const today = new Date();
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);

  return {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üü¢ –°–µ–≥–æ–¥–Ω—è', callback_data: `date_${formatDate(today)}` },
          { text: 'üü° –í—á–µ—Ä–∞', callback_data: `date_${formatDate(yesterday)}` },
        ],
        [{ text: 'üìÖ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –¥–∞—Ç—É', callback_data: 'input_date' }],
        [
          { text: 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å', callback_data: `refresh_${date}` }, // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å
          { text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' },
        ],
      ],
    },
  };
}

export function getBackKeyboard() {
  return {
    reply_markup: {
      inline_keyboard: [[{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]],
    },
  };
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã
export function formatDate(date) {
  const year = date.getFullYear();
  const month = String(date.getMonth() + 1).padStart(2, '0');
  const day = String(date.getDate()).padStart(2, '0');
  return `${year}${month}${day}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
export function parseUserDate(input) {
  try {
    const [day, month, year] = input.split('.');
    if (!day || !month || !year) return null;

    const date = new Date(`${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`);
    if (isNaN(date.getTime())) return null;

    return formatDate(date);
  } catch (error) {
    return null;
  }
}
